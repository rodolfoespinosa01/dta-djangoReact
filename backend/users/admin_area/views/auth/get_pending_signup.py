from rest_framework.decorators import api_view, permission_classes  # ğŸ‘‰ enables function-based views and sets permissions
from rest_framework.permissions import AllowAny  # ğŸ‘‰ allows access to unauthenticated users
from rest_framework.response import Response  # ğŸ‘‰ used to return structured api responses
from rest_framework import status  # ğŸ‘‰ provides standard http status codes

from users.admin_area.models import PendingSignup  # ğŸ‘‰ imports the pending signup model used after stripe checkout


from users.admin_area.models import PendingSignup

@api_view(['GET'])  # ğŸ‘‰ allows only get requests to this view
@permission_classes([AllowAny])  # ğŸ‘‰ open to all users (no auth required)
def get_pending_signup(request, token):
    try:
        pending = PendingSignup.objects.get(token=token)  # ğŸ‘‰ tries to fetch the pending signup using the provided token
        return Response({'email': pending.email}, status=status.HTTP_200_OK)  # ğŸ‘‰ returns the associated email if found
    except PendingSignup.DoesNotExist:
        return Response({'error': 'Invalid or expired token'}, status=status.HTTP_404_NOT_FOUND)  # ğŸ‘‰ error if token is invalid


# ğŸ‘‰ summary:
# retrieves the email tied to a pending admin signup using a one-time token.
# used after stripe checkout to autofill or confirm the user's email before account creation.
# returns 404 if the token is invalid or expired.